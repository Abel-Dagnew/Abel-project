trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: 'Build Stage'
    jobs:
      - job: Build
        displayName: 'Build Job'
        steps:
          # Checkout code
          - checkout: self

          # Install Node.js
          - task: NodeTool@0
            inputs:
              versionSpec: '22.x'
            displayName: 'Install Node.js'

          # Install npm dependencies
          - script: |
              cd app
              npm install
            displayName: 'Install Dependencies'

          # Build the application
          - script: |
              cd app
              npm run build
            displayName: 'Build Application'

          # Create a zip file of the application and store it in the artifact staging directory
          - script: |
              cd app
              zip -r $(Build.ArtifactStagingDirectory)/node_app.zip .  # Use Artifact Staging Directory
            displayName: 'Create Node.js App ZIP'

  - stage: Deploy
    displayName: 'Deploy Stage'
    dependsOn: 
      - Build
    jobs:
      - job: Deploy
        displayName: 'Deployment Job'
        timeoutInMinutes: 120
        steps:
          
          # Install Terraform
          - script: |
              curl -o terraform.zip https://releases.hashicorp.com/terraform/1.0.11/terraform_1.0.11_linux_amd64.zip
              unzip terraform.zip
              sudo mv terraform /usr/local/bin/
              terraform -version
            displayName: 'Install Terraform'

          # Authenticate and initialize Terraform backend with reconfigure
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Abel-serviceP-conn'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                export TF_LOG=DEBUG
                export TF_LOG_PATH="terraform_debug.log"
                export TF_VAR_client_id=$(ARM_CLIENT_ID)
                export TF_VAR_client_secret=$(ARM_CLIENT_SECRET)
                export TF_VAR_tenant_id=$(ARM_TENANT_ID)
                export TF_VAR_subscription_id=$(ARM_SUBSCRIPTION_ID)

                # Run Terraform Init with reconfigure (if needed)
                terraform init -reconfigure  # Explicitly reconfigure if the backend requires changes

                # Terraform Plan and Apply
                terraform plan -target=module.Create_App_Service | tee -a $TF_LOG_PATH
                terraform apply -target=module.Create_App_Service -auto-approve | tee -a $TF_LOG_PATH
            displayName: 'Provision Infrastructure with Terraform'

          # Authenticate Azure CLI with Azure service principal
          - script: |
              echo "Authenticating with Azure CLI using Service Principal..."
              az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
              az account set --subscription $(ARM_SUBSCRIPTION_ID)
              echo "Authenticated with Azure CLI."
            displayName: 'Azure CLI Authentication' 

          # Deploy the Node.js app
          - script: |
              az webapp deployment source config-zip \
                --resource-group "AbelDevopsRG33" \
                --name "AbelDevops23443" \
                --src "$(Build.ArtifactStagingDirectory)/node_app.zip"
            displayName: 'Deploy Node.js App to App Service'
