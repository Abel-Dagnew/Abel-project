trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: 'Build Stage'
    jobs:
      - job: Build
        displayName: 'Build Job'
        steps:
          # Checkout code
          - checkout: self

          # Install Node.js
          - task: NodeTool@0
            inputs:
              versionSpec: '22.x'
            displayName: 'Install Node.js'

          # Install npm dependencies
          - script: |
              cd app
              npm install
            displayName: 'Install Dependencies'

          # Build the application
          - script: |
              cd app
              npm run build
            displayName: 'Build Application'

          # Create a zip file of the application
          - script: |
              cd app
              zip -r ../node_app.zip .
            displayName: 'Create Node.js App ZIP'

  - stage: Deploy
    displayName: 'Deploy Stage'
    dependsOn: 
      - Build
    jobs:
      - job: Deploy
        displayName: 'Deployment Job'
        timeoutInMinutes: 120
        steps:
          # Install Terraform
          - script: |
              curl -o terraform.zip https://releases.hashicorp.com/terraform/1.0.11/terraform_1.0.11_linux_amd64.zip
              unzip terraform.zip
              sudo mv terraform /usr/local/bin/
              terraform -version
            displayName: 'Install Terraform'

          # Authenticate and initialize Terraform backend
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Abel-serviceP-conn'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                export TF_LOG=DEBUG
                export TF_LOG_PATH="terraform_debug.log"
                export TF_VAR_client_id=$(ARM_CLIENT_ID)
                export TF_VAR_client_secret=$(ARM_CLIENT_SECRET)
                export TF_VAR_tenant_id=$(ARM_TENANT_ID)
                export TF_VAR_subscription_id=$(ARM_SUBSCRIPTION_ID)

                # Initialize Terraform (uncomment backend configuration if needed)
                terraform init \
                  # -reconfigure \
                  # -backend-config="resource_group_name=abel_RG" \
                  # -backend-config="storage_account_name=terraform443" \
                  # -backend-config="container_name=terraform-statefile" \
                  # -backend-config="key=terraform.tfstate"

                terraform plan -target=module.Create_App_Service | tee -a $TF_LOG_PATH
                terraform apply -target=module.Create_App_Service -auto-approve | tee -a $TF_LOG_PATH
            displayName: 'Provision Infrastructure with Terraform'

          # Deploy the Node.js app directly (without publishing artifact)
          - script: |
              az webapp deployment source config-zip \
                --resource-group "AbelDevopsRG33" \
                --name "AbelDevops23443" \
                --src "$(Build.SourcesDirectory)/node_app.zip"  # Directly reference the file
            displayName: 'Deploy Node.js App to App Service'
