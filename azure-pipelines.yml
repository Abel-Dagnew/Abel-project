# azure-pipelines.yml

# Trigger the pipeline on changes to the main branch
trigger:
  branches:
    include:
      - main  # Adjust this to your branch

# Use the latest Ubuntu VM image
pool:
  vmImage: 'ubuntu-latest'

# Define build and deployment stages
stages:
  - stage: Build
    displayName: 'Build Stage'
    jobs:
      - job: Build
        displayName: 'Build Job'
        steps:
          # Checkout code
          - checkout: self

          # Install Node.js
          - task: NodeTool@0
            inputs:
              versionSpec: '22.x'  # Specify your Node.js version here
            displayName: 'Install Node.js'

          # Install npm dependencies
          - script: |
              npm install
            displayName: 'Install Dependencies'

          # Build the application
          - script: |
              npm run build
            displayName: 'Build Application'

  - stage: Deploy
    displayName: 'Deploy Stage'
    jobs:
      - job: Deploy
        displayName: 'Deployment Job'
        steps:
          # Checkout code
          - checkout: self

          # Install Terraform CLI
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'
              addToPath: true
          - script: |
              curl -o- https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
            displayName: 'Install Terraform'

          # Authenticate with Azure using a Service Principal
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Abel-serviceP-conn'  # Set up your Azure DevOps service connection
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                # Export Service Principal credentials as environment variables
                export ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}
                export ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}
                export ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}
                export ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}
                
                # Terraform commands
                terraform init
                terraform plan -out=tfplan
                terraform apply -auto-approve tfplan
            displayName: 'Provision Infrastructure with Terraform'

          # Deploy the Node.js app to the Azure App Service
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Abel-serviceP-conn'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                # Deploy to Azure App Service
                zip -r node_app.zip .
                az webapp deployment source config-zip \
                  --resource-group "AbelTeraRG" \
                  --name "Abel-Project2232" \
                  --src "node_app.zip"
            displayName: 'Deploy Node.js App to App Service'
