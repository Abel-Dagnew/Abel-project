trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  TERRAFORM_DIR: 'Abel-project/terraform'

stages:
- stage: Terraform_Provisioning
  displayName: 'Provision Azure Infrastructure with Terraform'
  jobs:
  - job: TerraformJob
    displayName: 'Run Terraform Deployment'
    steps:
    - task: TerraformCLI@1
      displayName: 'Terraform Init'
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(TERRAFORM_DIR)'
        backendType: 'azurerm'
        backendServiceArm: 'abel-conn-service'
        commandOptions: '-reconfigure'

    - task: TerraformCLI@1
      displayName: 'Terraform Plan'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(TERRAFORM_DIR)'

    - task: TerraformCLI@1
      displayName: 'Terraform Apply'
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(TERRAFORM_DIR)'
        commandOptions: '-auto-approve'

  

# stages:
  # - stage: Build
  #   displayName: 'Build Stage'
  #   jobs:
  #     - job: Build
  #       displayName: 'Build Job'
  #       steps:
  #         # Checkout code
  #         - checkout: self

  #         # Install Node.js
  #         - task: NodeTool@0
  #           inputs:
  #             versionSpec: '22.x'  # Specify your Node.js version here
  #           displayName: 'Install Node.js'

          

  #         # # Install npm dependencies using Azure Artifacts feed
  #         # - script: |
  #         #     cd app
  #         #     npm install --registry=https://pkgs.dev.azure.com/v-abeldagnew/ExampleProject/_packaging/testfeed/npm/registry/
  #         #   displayName: 'Install Dependencies'

  #         # Build the application
  #         - script: |
  #             cd app
  #             npm run build
  #           displayName: 'Build Application'

          
            
  #         - task: npmAuthenticate@0
  #           inputs:
  #              workingFile: 'app/.npmrc'  # Authenticate to Azure Artifacts

  #         - script: |
  #             cd app          
  #             npm version patch
  #             npm publish --tag latest
  #           displayName: 'Publish npm Package'
           
  #         # # Create a zip file of the application
  #         # - script: |
  #         #     cd app
  #         #     zip -r $(Build.ArtifactStagingDirectory)/node_app.zip .
  #         #   displayName: 'Create Node.js App ZIP'

  #         # # Publish the artifact
  #         # - task: PublishPipelineArtifact@1
  #         #   inputs:
  #         #     targetPath: '$(Build.ArtifactStagingDirectory)/node_app.zip'
  #         #     artifact: 'node_app'
  #         #   displayName: 'Publish Build Artifact'





  # # - stage: Deploy
  #   displayName: 'Deploy Stage'
  #   # dependsOn: 
  #   #   - Build
  #   jobs:
  #     - job: Deploy
  #       displayName: 'Deployment Job'
  #       timeoutInMinutes: 120
  #       steps:
  #         # Download the artifact
  #         # - task: DownloadPipelineArtifact@2
  #         #   inputs:
  #         #     artifact: 'node_app'
  #         #     path: '$(Pipeline.Workspace)'  # This should download into $(Pipeline.Workspace)/node_app.zip
  #         #   displayName: 'Download Build Artifact'

  #         # Install Terraform
  #         - script: |
  #             curl -o terraform.zip https://releases.hashicorp.com/terraform/1.0.11/terraform_1.0.11_linux_amd64.zip
  #             unzip terraform.zip
  #             sudo mv terraform /usr/local/bin/
  #             terraform -version
  #           displayName: 'Install Terraform'

  #         # Authenticate and initialize Terraform backend with reconfigure
  #         - task: AzureCLI@2
  #           inputs:
  #             azureSubscription: 'abel-conn-service'
  #             scriptType: bash
  #             scriptLocation: inlineScript
  #             inlineScript: |
  #               cd $(System.DefaultWorkingDirectory)/./
  #               terraform init -reconfigure
  #               terraform plan -target=module.Create_App_Service | tee -a $TF_LOG_PATH
  #               terraform apply -target=module.Create_App_Service -auto-approve | tee -a $TF_LOG_PATH

  #         # # Authenticate Azure CLI with Azure service principal
  #         # - script: |
  #         #     echo "Authenticating with Azure CLI using Service Principal..."
  #         #     az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
  #         #     az account set --subscription $(ARM_SUBSCRIPTION_ID)
  #         #     echo "Authenticated with Azure CLI."
  #         #   displayName: 'Azure CLI Authentication'

  #         # # Deploy the Node.js app
  #         # - script: |
  #         #     az webapp deployment source config-zip \
  #         #       --resource-group "AbelDevopsRG33" \
  #         #       --name "AbelDevops231112" \
  #         #       --src "$(Pipeline.Workspace)/node_app.zip"  # Correct download path
  #         #   displayName: 'Deploy Node.js App to App Service'
